name: Daily Progress Log

on:
  schedule:
    - cron: "30 20 * * *"   # 22:30 Berlin (20:30 UTC)
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      dedication:
        description: "Dedication (1–10)"
        required: false
      comprehension:
        description: "Comprehension (1–10)"
        required: false
      resilience:
        description: "Resilience (1–10)"
        required: false

permissions:
  contents: write
  pull-requests: write

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Berlin  # make "today" match your day in Berlin
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      # 1) Compute the Berlin day window and a human date string
      - name: Compute today's window (Berlin)
        id: window
        run: |
          since="$(date -d 'today 00:00' +'%Y-%m-%d %H:%M:%S %z')"
          until="$(date -d 'tomorrow 00:00' +'%Y-%m-%d %H:%M:%S %z')"
          echo "since=$since"  >> $GITHUB_OUTPUT
          echo "until=$until"  >> $GITHUB_OUTPUT
          echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

      # 2) Count commits / files / lines (+/-) for that window, excluding PROGRESS.md-only noise
      - name: Calculate stats
        id: stats
        run: |
          SINCE="${{ steps.window.outputs.since }}"
          UNTIL="${{ steps.window.outputs.until }}"

          # All commit SHAs in the window (ignore merges)
          mapfile -t SHAS < <(git log --since="$SINCE" --until="$UNTIL" --pretty=%H --no-merges)

          if [ ${#SHAS[@]} -eq 0 ]; then
            echo "commits=0" >> $GITHUB_OUTPUT
            echo "files=0"   >> $GITHUB_OUTPUT
            echo "plus=0"    >> $GITHUB_OUTPUT
            echo "minus=0"   >> $GITHUB_OUTPUT
            exit 0
          fi

          FIRST="${SHAS[-1]}"
          PARENT="$(git rev-parse "$FIRST^" 2>/dev/null || true)"
          if [ -z "$PARENT" ]; then
            RANGE="$FIRST"
          else
            RANGE="$PARENT..HEAD"
          fi

          files=$(git diff --name-only $RANGE | grep -v '^PROGRESS.md$' | sort -u | wc -l | tr -d ' ')
          read plus minus < <(git diff --numstat $RANGE | grep -v '[[:space:]]PROGRESS.md$' | awk '{a+=$1;b+=$2} END{print (a+0), (b+0)}')

          commits=$(printf "%s\n" "${SHAS[@]}" | wc -l | tr -d ' ')

          echo "commits=$commits" >> $GITHUB_OUTPUT
          echo "files=$files"     >> $GITHUB_OUTPUT
          echo "plus=$plus"       >> $GITHUB_OUTPUT
          echo "minus=$minus"     >> $GITHUB_OUTPUT

      # 3) Derive Built / Fixed / Next from commit titles (lowercased)
      - name: Derive Built/Fixed/Next from commit titles
        id: bfnt
        run: |
          SINCE="${{ steps.window.outputs.since }}"
          UNTIL="${{ steps.window.outputs.until }}"

          titles="$(git log --since="$SINCE" --until="$UNTIL" --pretty=%s --no-merges | tr '[:upper:]' '[:lower:]')"

          built=$(printf "%s\n" "$titles" | grep -E '^(build:|feat:|refactor:)' | wc -l | tr -d ' ')
          fixed=$(printf "%s\n" "$titles" | grep -E '^fix:' | wc -l | tr -d ' ')
          next=$(printf "%s\n" "$titles" | grep -E '^(next:|chore\(next\):)' | wc -l | tr -d ' ')

          echo "built=$built" >> $GITHUB_OUTPUT
          echo "fixed=$fixed" >> $GITHUB_OUTPUT
          echo "next=$next"   >> $GITHUB_OUTPUT

      # 3.5) Auto-score D/C/R from today's stats (used if you don't type values)
      - name: Auto-score ratings (fallback)
        id: autoscore
        run: |
          COMM="${{ steps.stats.outputs.commits }}"
          FILES="${{ steps.stats.outputs.files }}"
          PLUS="${{ steps.stats.outputs.plus }}"
          MINUS="${{ steps.stats.outputs.minus }}"
          BUILT="${{ steps.bfnt.outputs.built }}"
          FIXED="${{ steps.bfnt.outputs.fixed }}"

          # Dedication: more commits/files ⇒ higher score
          d=$(awk -v c="$COMM" -v f="$FILES" 'BEGIN{v=3+0.4*c+0.3*f; if(v<1)v=1; if(v>10)v=10; printf("%.0f", v)}')

          # Comprehension: building more than fixing ⇒ higher score
          comp=$(awk -v b="$BUILT" -v x="$FIXED" 'BEGIN{v=6+1.5*(b-x); if(v<1)v=1; if(v>10)v=10; printf("%.0f", v)}')

          # Resilience: refactors/deletions & fixes indicate iteration grit
          res=$(awk -v del="$MINUS" -v fx="$FIXED" 'BEGIN{v=5+0.02*del+0.5*fx; if(v<1)v=1; if(v>10)v=10; printf("%.0f", v)}')

          echo "dedication_auto=$d"       >> $GITHUB_OUTPUT
          echo "comprehension_auto=$comp" >> $GITHUB_OUTPUT
          echo "resilience_auto=$res"     >> $GITHUB_OUTPUT

      # 4) Capture ratings; if blank, use autoscore
      - name: Capture manual ratings (optional)
        id: ratings
        run: |
          d="${{ github.event.inputs.dedication }}"
          c="${{ github.event.inputs.comprehension }}"
          r="${{ github.event.inputs.resilience }}"

          # Fallbacks from autoscore when inputs are blank
          [ -z "$d" ] && d="${{ steps.autoscore.outputs.dedication_auto }}"
          [ -z "$c" ] && c="${{ steps.autoscore.outputs.comprehension_auto }}"
          [ -z "$r" ] && r="${{ steps.autoscore.outputs.resilience_auto }}"

          echo "dedication=$d"    >> $GITHUB_OUTPUT
          echo "comprehension=$c" >> $GITHUB_OUTPUT
          echo "resilience=$r"    >> $GITHUB_OUTPUT

      # 5) Update/append today's row in PROGRESS.md (replace whole line if exists)
      - name: Update PROGRESS.md (Berlin-aware)
        run: |
          DATE="${{ steps.window.outputs.date }}"
          COMM="${{ steps.stats.outputs.commits }}"
          FILES="${{ steps.stats.outputs.files }}"
          PLUS="${{ steps.stats.outputs.plus }}"
          MINUS="${{ steps.stats.outputs.minus }}"
          BUILT="${{ steps.bfnt.outputs.built }}"
          FIXED="${{ steps.bfnt.outputs.fixed }}"
          NEXT="${{ steps.bfnt.outputs.next }}"
          DEDI="${{ steps.ratings.outputs.dedication }}"
          COMP="${{ steps.ratings.outputs.comprehension }}"
          RESI="${{ steps.ratings.outputs.resilience }}"

          NEWROW="| ${DATE} | ${COMM} | ${FILES} | +${PLUS}/-${MINUS} | ${BUILT} | ${FIXED} | ${NEXT} | ${DEDI} | ${COMP} | ${RESI} |"

          if grep -qE "^\|[ ]*${DATE}[ ]*\|" PROGRESS.md; then
            tmp="$(mktemp)"
            awk -v d="$DATE" -v r="$NEWROW" '
              $0 ~ "^\\|[ ]*" d "[ ]*\\|" { print r; next }
              { print }
            ' PROGRESS.md > "$tmp" && mv "$tmp" PROGRESS.md
          else
            printf "\n%s\n" "$NEWROW" >> PROGRESS.md
          fi

      # 6) Open a PR with the change (your existing flow)
      - name: Create PR
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(progress): auto-update"
          title: "chore(progress): auto-update"
          body: "Daily progress log update."
          branch: "progress-bot/update"
          delete-branch: true
          author: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"

      - name: Auto-merge PR
        if: steps.cpr.outputs.pull-request-number
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash
